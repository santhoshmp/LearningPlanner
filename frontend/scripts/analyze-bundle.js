#!/usr/bin/env node

/**
 * Bundle analysis script
 * 
 * This script helps analyze the bundle size and identify large dependencies
 * It works with the stats.html file generated by rollup-plugin-visualizer
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

console.log(`${colors.bright}${colors.blue}=== Bundle Size Analyzer ===${colors.reset}\n`);

// Build the project with stats
console.log(`${colors.cyan}Building project with bundle analysis...${colors.reset}`);
try {
  execSync('npm run build', { stdio: 'inherit' });
} catch (error) {
  console.error(`${colors.red}Build failed. Please fix build errors before analyzing bundle.${colors.reset}`);
  process.exit(1);
}

// Check if stats.html was generated
const statsPath = path.join(__dirname, '..', 'stats.html');
if (!fs.existsSync(statsPath)) {
  console.error(`${colors.red}Stats file not found. Make sure rollup-plugin-visualizer is configured correctly.${colors.reset}`);
  process.exit(1);
}

console.log(`\n${colors.green}Build completed successfully!${colors.reset}`);
console.log(`${colors.bright}Bundle analysis stats available at: ${colors.reset}${statsPath}`);

// Get the dist directory size
const distPath = path.join(__dirname, '..', 'dist');
let totalSize = 0;

function calculateSize(dirPath) {
  const files = fs.readdirSync(dirPath);
  
  for (const file of files) {
    const filePath = path.join(dirPath, file);
    const stats = fs.statSync(filePath);
    
    if (stats.isDirectory()) {
      calculateSize(filePath);
    } else {
      totalSize += stats.size;
    }
  }
}

calculateSize(distPath);

// Convert bytes to human-readable format
function formatBytes(bytes, decimals = 2) {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

console.log(`\n${colors.bright}Total bundle size: ${colors.yellow}${formatBytes(totalSize)}${colors.reset}`);

// Provide optimization tips
console.log(`\n${colors.bright}${colors.magenta}Optimization Tips:${colors.reset}`);
console.log(`${colors.bright}1. ${colors.reset}Check for large dependencies in the stats visualization`);
console.log(`${colors.bright}2. ${colors.reset}Consider using dynamic imports for route components`);
console.log(`${colors.bright}3. ${colors.reset}Use specific imports from Material UI (e.g., @mui/material/Button instead of @mui/material)`);
console.log(`${colors.bright}4. ${colors.reset}Remove unused dependencies and code`);
console.log(`${colors.bright}5. ${colors.reset}Consider using lightweight alternatives for large libraries`);

console.log(`\n${colors.bright}${colors.blue}=== Analysis Complete ===${colors.reset}`);